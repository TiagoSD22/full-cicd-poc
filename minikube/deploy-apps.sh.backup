#!/bin/bash

# Deploy applications to Minikube cluster

set -e

# Colors f# Login to ECR
echo -e "${YELLOW}üîê Logging into AWS ECR...${NC}"
if aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REGISTRY_URL; then
    echo -e "${GREEN}‚úÖ Successfully logged into ECR${NC}"
else
    echo -e "${RED}‚ùå Failed to login to ECR${NC}"
    exit 1
fi

# Build and push backend image
echo -e "${YELLOW}üî® Building and pushing backend Docker image to ECR...${NC}"
cd ../backend
if docker build -t backend-api:latest .; then
    echo -e "${GREEN}‚úÖ Backend image built successfully${NC}"
else
    echo -e "${RED}‚ùå Failed to build backend image${NC}"
    exit 1
fi

docker tag backend-api:latest $REGISTRY_URL/backend-api:latest

if docker push $REGISTRY_URL/backend-api:latest; then
    echo -e "${GREEN}‚úÖ Backend image pushed to ECR successfully${NC}"
else
    echo -e "${RED}‚ùå Failed to push backend image to ECR${NC}"
    exit 1
fi

# Build and push frontend image
echo -e "${YELLOW}üî® Building and pushing frontend Docker image to ECR...${NC}"
cd ../frontend
if docker build -t frontend-app:latest .; then
    echo -e "${GREEN}‚úÖ Frontend image built successfully${NC}"
else
    echo -e "${RED}‚ùå Failed to build frontend image${NC}"
    exit 1
fi

docker tag frontend-app:latest $REGISTRY_URL/frontend-app:latest

if docker push $REGISTRY_URL/frontend-app:latest; then
    echo -e "${GREEN}‚úÖ Frontend image pushed to ECR successfully${NC}"
else
    echo -e "${RED}‚ùå Failed to push frontend image to ECR${NC}"
    exit 1
fi33[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Deploying Backend and Frontend applications...${NC}"

# Switch to application cluster
kubectl config use-context application-cluster

# Check AWS CLI and credentials
echo -e "${YELLOW}üîß Checking AWS credentials and setup...${NC}"
if ! command -v aws &> /dev/null; then
    echo -e "${RED}‚ùå AWS CLI is not installed. Please install AWS CLI first.${NC}"
    echo "Visit: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"
    exit 1
fi

# Check AWS credentials
if ! aws sts get-caller-identity &> /dev/null; then
    echo -e "${RED}‚ùå AWS credentials not configured or invalid.${NC}"
    echo "Please run 'aws configure' or export AWS credentials:"
    echo "export AWS_ACCESS_KEY_ID=your-access-key"
    echo "export AWS_SECRET_ACCESS_KEY=your-secret-key"
    echo "export AWS_DEFAULT_REGION=your-region"
    exit 1
fi

# Get AWS account ID and region
AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
AWS_REGION=$(aws configure get region || echo "us-west-2")
REGISTRY_URL="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

echo -e "${YELLOW}üìã Using AWS ECR registry: $REGISTRY_URL${NC}"
echo -e "${YELLOW}üìã AWS Account ID: $AWS_ACCOUNT_ID${NC}"
echo -e "${YELLOW}üìã AWS Region: $AWS_REGION${NC}"

# Create ECR repositories if they don't exist
echo -e "${YELLOW}üèóÔ∏è  Creating ECR repositories...${NC}"

# Create backend repository
if aws ecr describe-repositories --repository-names backend-api --region $AWS_REGION &>/dev/null; then
    echo -e "${GREEN}‚úÖ ECR repository 'backend-api' already exists${NC}"
else
    echo -e "${YELLOW}üì¶ Creating ECR repository 'backend-api'...${NC}"
    if aws ecr create-repository --repository-name backend-api --region $AWS_REGION; then
        echo -e "${GREEN}‚úÖ ECR repository 'backend-api' created successfully${NC}"
    else
        echo -e "${RED}‚ùå Failed to create ECR repository 'backend-api'${NC}"
        exit 1
    fi
fi

# Create frontend repository
if aws ecr describe-repositories --repository-names frontend-app --region $AWS_REGION &>/dev/null; then
    echo -e "${GREEN}‚úÖ ECR repository 'frontend-app' already exists${NC}"
else
    echo -e "${YELLOW}üì¶ Creating ECR repository 'frontend-app'...${NC}"
    if aws ecr create-repository --repository-name frontend-app --region $AWS_REGION; then
        echo -e "${GREEN}‚úÖ ECR repository 'frontend-app' created successfully${NC}"
    else
        echo -e "${RED}‚ùå Failed to create ECR repository 'frontend-app'${NC}"
        exit 1
    fi
fi

# Verify ECR repositories exist
echo -e "${YELLOW}üîç Verifying ECR repositories...${NC}"
if aws ecr describe-repositories --repository-names backend-api --region $AWS_REGION &>/dev/null; then
    BACKEND_URI=$(aws ecr describe-repositories --repository-names backend-api --region $AWS_REGION --query 'repositories[0].repositoryUri' --output text)
    echo -e "${GREEN}‚úÖ Backend repository exists: $BACKEND_URI${NC}"
else
    echo -e "${RED}‚ùå Backend repository 'backend-api' not found${NC}"
    exit 1
fi

if aws ecr describe-repositories --repository-names frontend-app --region $AWS_REGION &>/dev/null; then
    FRONTEND_URI=$(aws ecr describe-repositories --repository-names frontend-app --region $AWS_REGION --query 'repositories[0].repositoryUri' --output text)
    echo -e "${GREEN}‚úÖ Frontend repository exists: $FRONTEND_URI${NC}"
else
    echo -e "${RED}‚ùå Frontend repository 'frontend-app' not found${NC}"
    exit 1
fi

# Login to ECR
echo -e "${YELLOW}ÔøΩ Logging into AWS ECR...${NC}"
aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REGISTRY_URL

# Build and push backend image
echo -e "${YELLOW}üî® Building and pushing backend Docker image to ECR...${NC}"
cd ../backend
docker build -t backend-api:latest .
docker tag backend-api:latest $REGISTRY_URL/backend-api:latest
docker push $REGISTRY_URL/backend-api:latest

# Build and push frontend image
echo -e "${YELLOW}üî® Building and pushing frontend Docker image to ECR...${NC}"
cd ../frontend
docker build -t frontend-app:latest .
docker tag frontend-app:latest $REGISTRY_URL/frontend-app:latest
docker push $REGISTRY_URL/frontend-app:latest

cd ../minikube

# Create ECR secret for Kubernetes
echo -e "${YELLOW}üîê Creating ECR secret for Kubernetes...${NC}"
kubectl create namespace applications --dry-run=client -o yaml | kubectl apply -f -

# Create ECR secret
ECR_TOKEN=$(aws ecr get-login-password --region $AWS_REGION)
kubectl create secret docker-registry ecr-secret \
    --namespace applications \
    --docker-server=$REGISTRY_URL \
    --docker-username=AWS \
    --docker-password=$ECR_TOKEN \
    --dry-run=client -o yaml | kubectl apply -f -

# Also create the secret in default namespace for future use
kubectl create secret docker-registry ecr-secret \
    --namespace default \
    --docker-server=$REGISTRY_URL \
    --docker-username=AWS \
    --docker-password=$ECR_TOKEN \
    --dry-run=client -o yaml | kubectl apply -f -

# Deploy backend application
echo -e "${YELLOW}üì¶ Deploying backend application...${NC}"
helm upgrade --install backend-api ../k8s/charts/backend \
    --namespace applications \
    --create-namespace \
    --set image.repository=$REGISTRY_URL/backend-api \
    --set image.tag=latest \
    --set image.pullPolicy=Always \
    --set imagePullSecrets[0].name=ecr-secret \
    --set ingress.enabled=true \
    --set ingress.hosts[0].host=api.local \
    --set ingress.hosts[0].paths[0].path="/" \
    --set ingress.hosts[0].paths[0].pathType=Prefix

# Deploy frontend application
echo -e "${YELLOW}üì¶ Deploying frontend application...${NC}"
helm upgrade --install frontend-app ../k8s/charts/frontend \
    --namespace applications \
    --create-namespace \
    --set image.repository=$REGISTRY_URL/frontend-app \
    --set image.tag=latest \
    --set image.pullPolicy=Always \
    --set imagePullSecrets[0].name=ecr-secret \
    --set ingress.enabled=true \
    --set ingress.hosts[0].host=app.local \
    --set ingress.hosts[0].paths[0].path="/" \
    --set ingress.hosts[0].paths[0].pathType=Prefix \
    --set env[0].name=NEXT_PUBLIC_BACKEND_URL \
    --set env[0].value="http://api.local"

# Wait for deployments to be ready
echo -e "${YELLOW}‚è≥ Waiting for deployments to be ready...${NC}"
kubectl wait --for=condition=available --timeout=300s deployment/backend-api-backend -n applications
kubectl wait --for=condition=available --timeout=300s deployment/frontend-app-frontend-app -n applications

# Get service URLs
APP_IP=$(minikube ip -p application-cluster)

echo -e "${GREEN}‚úÖ Applications deployed successfully!${NC}"
echo ""
echo -e "${BLUE}Access Information:${NC}"
echo "=================="
echo ""
echo "Add these entries to your /etc/hosts file (or C:\\Windows\\System32\\drivers\\etc\\hosts on Windows):"
echo "${APP_IP} api.local"
echo "${APP_IP} app.local"
echo ""
echo -e "${YELLOW}Application URLs:${NC}"
echo "  Frontend: http://app.local"
echo "  Backend API: http://api.local/api/hello"
echo "  Backend Health: http://api.local/health"
echo ""
echo -e "${BLUE}Testing the API:${NC}"
echo "curl http://api.local/api/hello"
echo ""
echo -e "${GREEN}üéâ Applications are ready to use!${NC}"
